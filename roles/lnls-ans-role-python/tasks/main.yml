---
- name: Resolve platform specific vars
  include_vars: '{{ item }}'
  with_first_found:
    - files:
        - '{{ ansible_distribution }}-{{ ansible_distribution_release }}.yml'
        - '{{ ansible_distribution }}.yml'
        - '{{ ansible_os_family }}.yml'
      ignore_errors: true
      paths:
        - '{{ role_path }}/vars'

- name: Define basic packages
  set_fact:
    basic_packages: "{{ __basic_packages | list }}"
  when: basic_packages is not defined

- name: Define python base variable
  set_fact:
    python_base_packages: "{{ __python_base_packages | list }}"
  when: python_base_packages is not defined

- name: Define python dep packages
  set_fact:
    python_dep_packages: "{{ __python_dep_packages | list }}"
  when: python_dep_packages is not defined

- name: Define python packages
  set_fact:
    python_packages: "{{ __python_packages | list }}"
  when: python_packages is not defined

- name: Define pip packages
  set_fact:
    python_pip_packages: "{{ __python_pip_packages | list }}"
  when: python_pip_packages is not defined

# Combine apps to install
- name: Create list of dict apps to install
  set_fact:
    pre_python_packages: "{{ pre_python_packages | default([]) |
            list + lookup('vars', item) }}"
  with_items:
    - basic_packages
    - python_dep_packages

- name: Default variable to empty
  set_fact:
    pre_python_packages: "[]"
  when:
    - pre_python_packages is not defined

- name: Define PIP executable
  set_fact:
    pip_executable: "{{ __pip_executable | default(omit) }}"
  when: pip_executable is not defined

- name: Define python all
  set_fact:
    python_all: "{{ python_packages | list }}"
  when: python_all is not defined

- name: Define python version
  set_fact:
    python_version: "{{ python_src_version | default('3.5') }}"
  when: python_version is not defined

- name: Default Python short version
  set_fact:
    python_version_short: "{{ python_version|regex_replace('(\\d+\\.\\d+)\\..*$', '\\1') }}"
  when: python_version_short is not defined

- name: Default Python source variables
  set_fact:
    python_exec: "python{{ python_version_short }}"
  when: python_exec is not defined

- name: Default PIP source variables
  set_fact:
    pip_exec: "pip{{ python_version_short }}"
  when: pip_exec is not defined

- name: Default Python config source variables
  set_fact:
    python_config_exec: "python{{ python_version_short }}-config"
  when: python_config_exec is not defined

- name: Define Python install form source
  set_fact:
    python_install_from_src: "{{ __python_install_from_src | default(false) }}"
  when: python_install_from_src is not defined

- name: Check which python version is installed
  command: "{{ python_exec }} --version"
  register: python_version_result
  failed_when: false
  changed_when: false
  check_mode: false

- name: Extract python version number
  set_fact:
    python_installed_version: "{{ python_version_result.stdout | default('') | regex_replace('Python (\\d+\\.\\d+\\.\\d+)', '\\1') }}"
  when: python_installed_version is not defined

# Include Tasks

- include_tasks: setup-RedHat.yml
  when: ansible_os_family == 'RedHat'

- include_tasks: setup-Debian.yml
  when: ansible_os_family == 'Debian'

- include_tasks: setup-packages.yml
  when: ansible_os_family == 'Debian'

- include_tasks: install-python-from-source.yml
  when: >-
    python_install_from_src and
    (python_src_force_install or
      python_installed_version != python_src_version)

- include_tasks: install-python-from-apt.yml
  when: >-
    ansible_os_family == 'Debian' and
      not python_install_from_src and
      python_installed_version != python_src_version

- name: Redefine Python source variables if not from source
  set_fact:
    python_exec: "python3"
  when: not python_install_from_src

- name: Redefine PIP source variables if not from source
  set_fact:
    pip_exec: "pip3"
  when: not python_install_from_src

- name: Redefine Python-config source variables if not from source
  set_fact:
    python_config_exec: "python3-config"
  when: not python_install_from_src

- include_tasks: setup-python.yml
  when: ansible_os_family == 'Debian'

- name: Update ldconfig
  command: ldconfig
  changed_when: false

- name: Create symbolic link to include/numpy
  file:
    src: "/usr/local/lib/python{{ python_version_short }}/site-packages/numpy/core/include/numpy"
    dest: "/usr/include/numpy"
    state: link
