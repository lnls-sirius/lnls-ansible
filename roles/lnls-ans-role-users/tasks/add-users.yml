---
- name: Create users
  user:
    name: '{{ item.name }}'
    state: '{{ item.state | default("present") }}'
    uid: '{{ item.uid | default(omit) }}'
    group: '{{ item.group | default(item.name) }}'
    groups: '{{ item.groups | default("") | join(",") }}'
    shell: '{{ item.shell | default(users_default_shell) }}'
    comment: '{{ item.comment | default("Unknown User") }}'
    password: '{{ item.password | default(users_default_password) }}'
    update_password: '{{ item.update_password | default("on_create") }}'
    home: '{{ item.home | default("/home/"+item.name) }}'
    createhome: '{{ item.createhome | default(users_create_homedirs) }}'
    system: '{{ item.system | default(omit) }}'
    generate_ssh_key: '{{ item.gen_ssh_key | default(users_gen_ssh_keys) | default("yes") }}'
    ssh_key_bits: '{{ item.ssh_key_bits | default(users_ssh_key_bits) | default(2048) }}'
    ssh_key_file: '{{ item.ssh_key_file | default(users_ssh_key_file) | default(".ssh/id_rsa") }}'
    append: true
  with_items: "{{ users }}"
  when: >
    not ( item.name == ansible_env.SUDO_USER | default(ansible_env.USER, true) | default(ansible_user_id, true) and
    item.state|default('present') == 'absent' )
  become: true
  register: users_rc

# Filter users_rc to get a dict with list of {names, homes}
- name: Create dict of names,home from created users
  set_fact:
    users_rc_names_homes: "{{ users_rc_names_homes|default({}) | combine( {item.name: item.home} ) }}"
  with_items: "{{ users_rc.results }}"

# Only create dirs when the corresponding "home" was created previously
- name: Create custom dirs in homes
  file:
    path: "{{ users_rc_names_homes[item.0.name] }}/{{ item.1 }}"
    owner: "{{ item.0.name }}"
    group: "{{ item.0.name }}"
    state: directory
    mode: 0755
  become: true
  with_subelements:
    - "{{ users }}"
    - dirs_in_home
    - skip_missing: true
  when: item.0.name in users_rc_names_homes.keys() and
        item.0.state | default('present') == 'present'
